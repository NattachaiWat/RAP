name: "CaffeNet"
layer {
  name: "data"
  type: "MultiImageData"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    mirror: false 
    crop_size: 227
    mean_value: 104
    mean_value: 117
    mean_value: 123
  }
  multiimage_data_param {
    root_folder: "/mnt/data1/lidw/dataset/"
    source: "./../static/classification/rap2_ide_att_trainvaltest.txt"
    # source: "./../static/classification/rap2_ide_att_test.txt" # for check
    shuffle: false
    batch_size: 100 
    new_height: 256
    new_width: 256
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_em"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc7_em"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu7_em"
  type: "ReLU"
  bottom: "fc7_em"
  top: "fc7_em"
}
layer {
  name: "drop7_em"
  type: "Dropout"
  bottom: "fc7_em"
  top: "fc7_em"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fine_fc8_ide"
  type: "InnerProduct"
  bottom: "fc7_em"
  top: "fine_fc8_ide"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1324 
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "fine_fc8_att"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fine_fc8_att"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 54
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "label_slice"
  type: "Slice"
  bottom: "label"
  top: "label_ide"
  top: "label_att"
  slice_param{
    axis: 1 
    slice_point: 1
  }
}
layer {
  name: "multilabel_accuracy"
  type: "MultiLabelAccuracy"
  bottom: "fine_fc8_att"
  bottom: "label_att"
  top: "multilabel_accuracy"
}
layer {
  name: "multilabel_loss"
  type: "MultiLabelLoss"
  bottom: "fine_fc8_att"
  bottom: "label_att"
  top: "multilabel_loss"
  loss_weight: 0.018518518518518517
  multilabel_loss_param{
    weight:0.338861
    weight:0.010698
    weight:0.435767
    weight:0.553535
    weight:0.000000
    weight:0.157975
    weight:0.729250
    weight:0.099314
    weight:0.924311
    weight:0.071142
    weight:0.002229
    weight:0.227868
    weight:0.955781
    weight:0.017384
    weight:0.073906
    weight:0.220558
    weight:0.147009
    weight:0.079344
    weight:0.264420
    weight:0.139075
    weight:0.274405
    weight:0.027637
    weight:0.035036
    weight:0.014353
    weight:0.001426
    weight:0.559508
    weight:0.035571
    weight:0.034858
    weight:0.032807
    weight:0.263618
    weight:0.141482
    weight:0.271374
    weight:0.286975
    weight:0.126415
    weight:0.017919
    weight:0.158688
    weight:0.000178
    weight:0.017295
    weight:0.061870
    weight:0.024606
    weight:0.038246
    weight:0.025675
    weight:0.011055
    weight:0.034947
    weight:0.301417
    weight:0.038156
    weight:0.033610
    weight:0.090933
    weight:0.024516
    weight:0.013729
    weight:0.024071
    weight:0.019791
    weight:0.109031
    weight:0.005527
  }
}
layer {
  name: "Accuracy"
  type: "Accuracy"
  bottom: "fine_fc8_ide"
  bottom: "label_ide"
  top: "Accuracy"
}
layer {
  name: "SoftmaxLoss"
  type: "SoftmaxWithLoss"
  bottom: "fine_fc8_ide"
  bottom: "label_ide"
  top: "SoftmaxLoss"
  loss_weight: 1.0
}
